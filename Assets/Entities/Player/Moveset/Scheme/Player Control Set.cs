//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Sources/IO/Player Control Set.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Cappa.Player
{


    public partial class @PlayerControlSet : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControlSet()
        {
            asset = InputActionAsset.FromJson(@"{
            ""name"": ""Player Control Set"",
            ""maps"": [
            {
                ""name"": ""Base Movement"",
                ""id"": ""876849fe-13c0-4fd9-ab4a-7c0ab2ff2ac2"",
                ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""1f8bdc20-00d2-472c-a6e1-fbc20b5db0af"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""2d8e6de7-1555-485c-a66b-e1793a507655"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
                ],

                ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7799d00d-cdc4-4e2d-9fc6-cb89585910f7"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""88bf3648-2960-477f-b50e-064757272148"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c00ef80d-ee79-4415-b5ad-8361da2d5810"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a47a4a33-eb72-4686-bc20-8f854111e8de"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""22a68186-ff5e-4d41-8165-6366f7ee9af4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8129863c-e28c-4b83-8884-35d336752f41"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
                ]
            }
    ],
    ""controlSchemes"": []
}");
            // Base Movement
            m_BaseMovement = asset.FindActionMap("Base Movement", throwIfNotFound: true);
            m_BaseMovement_Move = m_BaseMovement.FindAction("Move", throwIfNotFound: true);
            m_BaseMovement_Dash = m_BaseMovement.FindAction("Dash", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Base Movement
        private readonly InputActionMap m_BaseMovement;
        private IBaseMovementActions m_BaseMovementActionsCallbackInterface;
        private readonly InputAction m_BaseMovement_Move;
        private readonly InputAction m_BaseMovement_Dash;
        public struct BaseMovementActions
        {
            private @PlayerControlSet m_Wrapper;
            public BaseMovementActions(@PlayerControlSet wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_BaseMovement_Move;
            public InputAction @Dash => m_Wrapper.m_BaseMovement_Dash;
            public InputActionMap Get() { return m_Wrapper.m_BaseMovement; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(BaseMovementActions set) { return set.Get(); }
            public void SetCallbacks(IBaseMovementActions instance)
            {
                if (m_Wrapper.m_BaseMovementActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_BaseMovementActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_BaseMovementActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_BaseMovementActionsCallbackInterface.OnMove;
                    @Dash.started -= m_Wrapper.m_BaseMovementActionsCallbackInterface.OnDash;
                    @Dash.performed -= m_Wrapper.m_BaseMovementActionsCallbackInterface.OnDash;
                    @Dash.canceled -= m_Wrapper.m_BaseMovementActionsCallbackInterface.OnDash;
                }
                m_Wrapper.m_BaseMovementActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @Dash.started += instance.OnDash;
                    @Dash.performed += instance.OnDash;
                    @Dash.canceled += instance.OnDash;
                }
            }
        }
        public BaseMovementActions @BaseMovement => new BaseMovementActions(this);
        public interface IBaseMovementActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnDash(InputAction.CallbackContext context);
        }
    }

}